try:
    db.create_collection(
        "StartupDetails",
        validator={
            "$jsonSchema": {
                "bsonType": "object",
                "required": [
                    "startupName",
                    "registeredName",
                    "incorporationMonth",
                    "incorporationYear",
                    "about",
                    "emailId",
                    "uid"
                ],
                "properties": {
                    "startupName": {"bsonType": "string"},
                    "registeredName": {"bsonType": "string"},
                    "incorporationMonth": {"bsonType": "string"},
                    "incorporationYear": {"bsonType": "string"},
                    "about": {"bsonType": "string"},
                    "emailId": {"bsonType": "string"},
                    "uid": {"bsonType": "string"},
                    "createdAt": {"bsonType": "date"},
                    "uploadedFiles": {
                        "bsonType": "array",
                        "items": {
                            "bsonType": "object",
                            "required": ["fileName", "gcsUrl"],
                            "properties": {
                                "fileName": {"bsonType": "string"},
                                "gcsUrl": {"bsonType": "string"}
                            }
                        }
                    }
                },
            }
        },
    )
    print("✅ 'StartupDetails' collection created with updated schema.")
except Exception:
    print("ℹ️ 'StartupDetails' collection already exists.")




from datetime import datetime
from fastapi import UploadFile, Form
import tempfile
import os
from google.cloud import storage

@app.post("/upload-and-analyze")
async def upload_and_analyze(
    files: list[UploadFile],
    user_email: str = Form(...),
    startup_uid: str = Form(...)
):
    bucket = storage_client.bucket(BUCKET_NAME)
    uploaded_files = []

    for file in files:
        blob_name = f"{user_email}/{file.filename}"
        blob = bucket.blob(blob_name)

        # Save temp file and upload to GCS
        with tempfile.NamedTemporaryFile(delete=False) as tmp:
            tmp.write(await file.read())
            tmp_path = tmp.name

        blob.upload_from_filename(tmp_path)
        os.remove(tmp_path)

        # Build GCS file URL
        gcs_url = f"gs://{BUCKET_NAME}/{blob_name}"
        uploaded_files.append({"fileName": file.filename, "gcsUrl": gcs_url})

    # Update MongoDB StartupDetails collection with uploaded files
    db.StartupDetails.update_one(
        {"uid": startup_uid},
        {"$push": {"uploadedFiles": {"$each": uploaded_files}}},
        upsert=True  # optional: creates document if doesn't exist
    )

    return {
        "message": "✅ Files uploaded and saved to MongoDB",
        "uploadedFiles": uploaded_files
    }
